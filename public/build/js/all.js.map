{"version":3,"sources":["app.js","material.js","ripples.js"],"names":[],"mappingsfile":"all.js","sourcesContent":["","/* globals jQuery */\n\n(function($) {\n  // Selector to select only not already processed elements\n  $.expr[\":\"].notmdproc = function(obj){\n    if ($(obj).data(\"mdproc\")) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  function _isChar(evt) {\n    if (typeof evt.which == \"undefined\") {\n      return true;\n    } else if (typeof evt.which == \"number\" && evt.which > 0) {\n      return !evt.ctrlKey && !evt.metaKey && !evt.altKey && evt.which != 8 && evt.which != 9;\n    }\n    return false;\n  }\n\n  $.material =  {\n    \"options\": {\n      // These options set what will be started by $.material.init()\n      \"input\": true,\n      \"ripples\": true,\n      \"checkbox\": true,\n      \"togglebutton\": true,\n      \"radio\": true,\n      \"arrive\": true,\n      \"autofill\": false,\n\n      \"withRipples\": [\n        \".btn:not(.btn-link)\",\n        \".card-image\",\n        \".navbar a:not(.withoutripple)\",\n        \".dropdown-menu a\",\n        \".nav-tabs a:not(.withoutripple)\",\n        \".withripple\",\n        \".pagination li:not(.active):not(.disabled) a:not(.withoutripple)\"\n      ].join(\",\"),\n      \"inputElements\": \"input.form-control, textarea.form-control, select.form-control\",\n      \"checkboxElements\": \".checkbox > label > input[type=checkbox]\",\n      \"togglebuttonElements\": \".togglebutton > label > input[type=checkbox]\",\n      \"radioElements\": \".radio > label > input[type=radio]\"\n    },\n    \"checkbox\": function(selector) {\n      // Add fake-checkbox to material checkboxes\n      $((selector) ? selector : this.options.checkboxElements)\n      .filter(\":notmdproc\")\n      .data(\"mdproc\", true)\n      .after(\"<span class=checkbox-material><span class=check></span></span>\");\n    },\n    \"togglebutton\": function(selector) {\n      // Add fake-checkbox to material checkboxes\n      $((selector) ? selector : this.options.togglebuttonElements)\n      .filter(\":notmdproc\")\n      .data(\"mdproc\", true)\n      .after(\"<span class=toggle></span>\");\n    },\n    \"radio\": function(selector) {\n      // Add fake-radio to material radios\n      $((selector) ? selector : this.options.radioElements)\n      .filter(\":notmdproc\")\n      .data(\"mdproc\", true)\n      .after(\"<span class=circle></span><span class=check></span>\");\n    },\n    \"input\": function(selector) {\n      $((selector) ? selector : this.options.inputElements)\n      .filter(\":notmdproc\")\n      .data(\"mdproc\", true)\n      .each( function() {\n        var $this = $(this);\n\n        if (!$this.attr(\"data-hint\") && !$this.hasClass(\"floating-label\")) {\n          return;\n        }\n        $this.wrap(\"<div class=form-control-wrapper></div>\");\n        $this.after(\"<span class=material-input></span>\");\n\n        // Add floating label if required\n        if ($this.hasClass(\"floating-label\")) {\n          var placeholder = $this.attr(\"placeholder\");\n          $this.attr(\"placeholder\", null).removeClass(\"floating-label\");\n          $this.after(\"<div class=floating-label>\" + placeholder + \"</div>\");\n        }\n\n        // Add hint label if required\n        if ($this.attr(\"data-hint\")) {\n          $this.after(\"<div class=hint>\" + $this.attr(\"data-hint\") + \"</div>\");\n        }\n\n        // Set as empty if is empty (damn I must improve this...)\n        if ($this.val() === null || $this.val() == \"undefined\" || $this.val() === \"\") {\n          $this.addClass(\"empty\");\n        }\n\n        // Support for file input\n        if ($this.parent().next().is(\"[type=file]\")) {\n          $this.parent().addClass(\"fileinput\");\n          var $input = $this.parent().next().detach();\n          $this.after($input);\n        }\n      });\n    },\n    \"attachInputEventHandlers\": function() {\n      $(document)\n      .on(\"change\", \".checkbox input[type=checkbox]\", function() { $(this).blur(); })\n      .on(\"keydown paste\", \".form-control\", function(e) {\n        if(_isChar(e)) {\n          $(this).removeClass(\"empty\");\n        }\n      })\n      .on(\"keyup change\", \".form-control\", function() {\n        var $this = $(this);\n        if ($this.val() === \"\" && (typeof $this[0].checkValidity === \"undefined\" || $this[0].checkValidity())) {\n          $this.addClass(\"empty\");\n        } else {\n          $this.removeClass(\"empty\");\n        }\n      })\n      .on(\"focus\", \".form-control-wrapper.fileinput\", function() {\n        $(this).find(\"input\").addClass(\"focus\");\n      })\n      .on(\"blur\", \".form-control-wrapper.fileinput\", function() {\n        $(this).find(\"input\").removeClass(\"focus\");\n      })\n      .on(\"change\", \".form-control-wrapper.fileinput [type=file]\", function() {\n        var $this = $(this);\n        var value = \"\";\n        $.each(this.files, function(i, file) {\n          value += file.name + \", \";\n        });\n        value = value.substring(0, value.length - 2);\n        if (value) {\n          $this.prev().removeClass(\"empty\");\n        } else {\n          $this.prev().addClass(\"empty\");\n        }\n        $this.prev().val(value);\n      });\n    },\n    \"ripples\": function(selector) {\n      $((selector) ? selector : this.options.withRipples).ripples();\n    },\n    \"autofill\": function() {\n      // This part of code will detect autofill when the page is loading (username and password inputs for example)\n      var loading = setInterval(function() {\n        $(\"input[type!=checkbox]\").each(function() {\n          var $this = $(this);\n          if ($this.val() && $this.val() !== $this.attr(\"value\")) {\n            $this.trigger(\"change\");\n          }\n        });\n      }, 100);\n\n      // After 10 seconds we are quite sure all the needed inputs are autofilled then we can stop checking them\n      setTimeout(function() {\n        clearInterval(loading);\n      }, 10000);\n    },\n    \"attachAutofillEventHandlers\": function() {\n      // Listen on inputs of the focused form (because user can select from the autofill dropdown only when the input has focus)\n      var focused;\n      $(document)\n      .on(\"focus\", \"input\", function() {\n        var $inputs = $(this).parents(\"form\").find(\"input\").not(\"[type=file]\");\n        focused = setInterval(function() {\n          $inputs.each(function() {\n            var $this = $(this);\n            if ($this.val() !== $this.attr(\"value\")) {\n              $this.trigger(\"change\");\n            }\n          });\n        }, 100);\n      })\n      .on(\"blur\", \"input\", function() {\n        clearInterval(focused);\n      });\n    },\n    \"init\": function() {\n      var $document = $(document);\n\n      if ($.fn.ripples && this.options.ripples) {\n        this.ripples();\n      }\n      if (this.options.input) {\n        this.input();\n        this.attachInputEventHandlers();\n      }\n      if (this.options.checkbox) {\n        this.checkbox();\n      }\n      if (this.options.togglebutton) {\n        this.togglebutton();\n      }\n      if (this.options.radio) {\n        this.radio();\n      }\n      if (this.options.autofill) {\n        this.autofill();\n        this.attachAutofillEventHandlers();\n      }\n\n      if (document.arrive && this.options.arrive) {\n        if ($.fn.ripples && this.options.ripples) {\n          $document.arrive(this.options.withRipples, function() {\n            $.material.ripples($(this));\n          });\n        }\n        if (this.options.input) {\n          $document.arrive(this.options.inputElements, function() {\n            $.material.input($(this));\n          });\n        }\n        if (this.options.checkbox) {\n          $document.arrive(this.options.checkboxElements, function() {\n            $.material.checkbox($(this));\n          });\n        }\n        if (this.options.radio) {\n          $document.arrive(this.options.radioElements, function() {\n            $.material.radio($(this));\n          });\n        }\n        if (this.options.togglebutton) {\n          $document.arrive(this.options.togglebuttonElements, function() {\n            $.material.togglebutton($(this));\n          });\n        }\n\n      }\n    }\n  };\n\n})(jQuery);\n","/* Copyright 2014+, Federico Zivolo, LICENSE at https://github.com/FezVrasta/bootstrap-material-design/blob/master/LICENSE.md */\n/* globals jQuery, navigator */\n\n(function($, window, document, undefined) {\n\n  \"use strict\";\n\n  /**\n   * Define the name of the plugin\n   */\n  var ripples = \"ripples\";\n\n\n  /**\n   * Get an instance of the plugin\n   */\n  var self = null;\n\n\n  /**\n   * Define the defaults of the plugin\n   */\n  var defaults = {};\n\n\n  /**\n   * Create the main plugin function\n   */\n  function Ripples(element, options) {\n    self = this;\n\n    this.element = $(element);\n\n    this.options = $.extend({}, defaults, options);\n\n    this._defaults = defaults;\n    this._name = ripples;\n\n    this.init();\n  }\n\n\n  /**\n   * Initialize the plugin\n   */\n  Ripples.prototype.init = function() {\n    var $element  = this.element;\n\n    $element.on(\"mousedown touchstart\", function(event) {\n      /**\n       * Verify if the user is just touching on a device and return if so\n       */\n      if(self.isTouch() && event.type === \"mousedown\") {\n        return;\n      }\n\n\n      /**\n       * Verify if the current element already has a ripple wrapper element and\n       * creates if it doesn't\n       */\n      if(!($element.find(\".ripple-wrapper\").length)) {\n        $element.append(\"<div class=\\\"ripple-wrapper\\\"></div>\");\n      }\n\n\n      /**\n       * Find the ripple wrapper\n       */\n      var $wrapper = $element.children(\".ripple-wrapper\");\n\n\n      /**\n       * Get relY and relX positions\n       */\n      var relY = self.getRelY($wrapper, event);\n      var relX = self.getRelX($wrapper, event);\n\n\n      /**\n       * If relY and/or relX are false, return the event\n       */\n      if(!relY && !relX) {\n        return;\n      }\n\n\n      /**\n       * Get the ripple color\n       */\n      var rippleColor = self.getRipplesColor($element);\n\n\n      /**\n       * Create the ripple element\n       */\n      var $ripple = $(\"<div></div>\");\n\n      $ripple\n      .addClass(\"ripple\")\n      .css({\n        \"left\": relX,\n        \"top\": relY,\n        \"background-color\": rippleColor\n      });\n\n\n      /**\n       * Append the ripple to the wrapper\n       */\n      $wrapper.append($ripple);\n\n\n      /**\n       * Make sure the ripple has the styles applied (ugly hack but it works)\n       */\n      (function() { return window.getComputedStyle($ripple[0]).opacity; })();\n\n\n      /**\n       * Turn on the ripple animation\n       */\n      self.rippleOn($element, $ripple);\n\n\n      /**\n       * Call the rippleEnd function when the transition \"on\" ends\n       */\n      setTimeout(function() {\n        self.rippleEnd($ripple);\n      }, 500);\n\n\n      /**\n       * Detect when the user leaves the element\n       */\n      $element.on(\"mouseup mouseleave touchend\", function() {\n        $ripple.data(\"mousedown\", \"off\");\n\n        if($ripple.data(\"animating\") === \"off\") {\n          self.rippleOut($ripple);\n        }\n      });\n\n    });\n  };\n\n\n  /**\n   * Get the new size based on the element height/width and the ripple width\n   */\n  Ripples.prototype.getNewSize = function($element, $ripple) {\n\n    return (Math.max($element.outerWidth(), $element.outerHeight()) / $ripple.outerWidth()) * 2.5;\n  };\n\n\n  /**\n   * Get the relX\n   */\n  Ripples.prototype.getRelX = function($wrapper,  event) {\n    var wrapperOffset = $wrapper.offset();\n\n    if(!self.isTouch()) {\n      /**\n       * Get the mouse position relative to the ripple wrapper\n       */\n      return event.pageX - wrapperOffset.left;\n    } else {\n      /**\n       * Make sure the user is using only one finger and then get the touch\n       * position relative to the ripple wrapper\n       */\n      event = event.originalEvent;\n\n      if(event.touches.length === 1) {\n        return event.touches[0].pageX - wrapperOffset.left;\n      }\n\n      return false;\n    }\n  };\n\n\n  /**\n   * Get the relY\n   */\n  Ripples.prototype.getRelY = function($wrapper, event) {\n    var wrapperOffset = $wrapper.offset();\n\n    if(!self.isTouch()) {\n      /**\n       * Get the mouse position relative to the ripple wrapper\n       */\n      return event.pageY - wrapperOffset.top;\n    } else {\n      /**\n       * Make sure the user is using only one finger and then get the touch\n       * position relative to the ripple wrapper\n       */\n      event = event.originalEvent;\n\n      if(event.touches.length === 1) {\n        return event.touches[0].pageY - wrapperOffset.top;\n      }\n\n      return false;\n    }\n  };\n\n\n  /**\n   * Get the ripple color\n   */\n  Ripples.prototype.getRipplesColor = function($element) {\n\n    var color = $element.data(\"ripple-color\") ? $element.data(\"ripple-color\") : window.getComputedStyle($element[0]).color;\n\n    return color;\n  };\n\n\n  /**\n   * Verify if the client browser has transistion support\n   */\n  Ripples.prototype.hasTransitionSupport = function() {\n    var thisBody  = document.body || document.documentElement;\n    var thisStyle = thisBody.style;\n\n    var support = (\n      thisStyle.transition !== undefined ||\n      thisStyle.WebkitTransition !== undefined ||\n      thisStyle.MozTransition !== undefined ||\n      thisStyle.MsTransition !== undefined ||\n      thisStyle.OTransition !== undefined\n    );\n\n    return support;\n  };\n\n\n  /**\n   * Verify if the client is using a mobile device\n   */\n  Ripples.prototype.isTouch = function() {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  };\n\n\n  /**\n   * End the animation of the ripple\n   */\n  Ripples.prototype.rippleEnd = function($ripple) {\n    $ripple.data(\"animating\", \"off\");\n\n    if($ripple.data(\"mousedown\") === \"off\") {\n      self.rippleOut($ripple);\n    }\n  };\n\n\n  /**\n   * Turn off the ripple effect\n   */\n  Ripples.prototype.rippleOut = function($ripple) {\n    $ripple.off();\n\n    if(self.hasTransitionSupport()) {\n      $ripple.addClass(\"ripple-out\");\n    } else {\n      $ripple.animate({\"opacity\": 0}, 100, function() {\n        $ripple.trigger(\"transitionend\");\n      });\n    }\n\n    $ripple.on(\"transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd\", function() {\n      $ripple.remove();\n    });\n  };\n\n\n  /**\n   * Turn on the ripple effect\n   */\n  Ripples.prototype.rippleOn = function($element, $ripple) {\n    var size = self.getNewSize($element, $ripple);\n\n    if(self.hasTransitionSupport()) {\n      $ripple\n      .css({\n        \"-ms-transform\": \"scale(\" + size + \")\",\n        \"-moz-transform\": \"scale(\" + size + \")\",\n        \"-webkit-transform\": \"scale(\" + size + \")\",\n        \"transform\": \"scale(\" + size + \")\"\n      })\n      .addClass(\"ripple-on\")\n      .data(\"animating\", \"on\")\n      .data(\"mousedown\", \"on\");\n    } else {\n      $ripple.animate({\n        \"width\": Math.max($element.outerWidth(), $element.outerHeight()) * 2,\n        \"height\": Math.max($element.outerWidth(), $element.outerHeight()) * 2,\n        \"margin-left\": Math.max($element.outerWidth(), $element.outerHeight()) * (-1),\n        \"margin-top\": Math.max($element.outerWidth(), $element.outerHeight()) * (-1),\n        \"opacity\": 0.2\n      }, 500, function() {\n        $ripple.trigger(\"transitionend\");\n      });\n    }\n  };\n\n\n  /**\n   * Create the jquery plugin function\n   */\n  $.fn.ripples = function(options) {\n    return this.each(function() {\n      if(!$.data(this, \"plugin_\" + ripples)) {\n        $.data(this, \"plugin_\" + ripples, new Ripples(this, options));\n      }\n    });\n  };\n\n})(jQuery, window, document);\n"],"sourceRoot":"/source/"}